package com.modulo.integrations.openvas.service;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.security.NoSuchAlgorithmException;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.jmock.Expectations;
import org.jmock.Mockery;
import org.jmock.lib.legacy.ClassImposteriser;
import org.junit.Before;
import org.junit.Test;

import com.modulo.integrations.openvas.to.VulnerabilityReport;
import com.modulo.integrations.openvas.utils.OpenVASReportListUtil;

import static org.junit.Assert.assertFalse;

public class OpenVASVulnerabilityReportsServiceTest {

   private Mockery context;

   @Before
   public void init() {

      this.context = new Mockery() {

         {

            this.setImposteriser(ClassImposteriser.INSTANCE);

         }

      };
   }

   @Test
   public void deveProcessarRelatorioQuandoListaValida() throws IOException, NoSuchAlgorithmException {

      final OpenVASVulnerabilityReportsServiceAdapter serviceAdapterMock = this.context.mock(OpenVASVulnerabilityReportsServiceAdapter.class);

      final OpenVASReportListUtil reportListUtilMock = this.context.mock(OpenVASReportListUtil.class);

      final Map<String, StringBuffer> reports = new HashMap<String, StringBuffer>();

      reports.put("ExportTest.xml", this.getBuffer());

      this.context.checking(new Expectations() {

         {

            this.one(serviceAdapterMock).list();
            this.will(returnValue(reports));

            this.one(reportListUtilMock).isNotProcessed(this.with(any(String.class)));
            this.will(returnValue(Boolean.TRUE));

            this.one(reportListUtilMock).register(this.with(any(String.class)));

         }

      });

      final OpenVASVulnerabilityReportsService reportsService = new OpenVASVulnerabilityReportsService();

      reportsService.setServiceAdapter(serviceAdapterMock);

      reportsService.setReportListUtilMock(reportListUtilMock);

      final List<VulnerabilityReport> actual = reportsService.list();

      assertFalse(actual.isEmpty());

      // assertFalse(actual.iterator().next().getVulnerabilities().isEmpty());

      this.context.assertIsSatisfied();

   }

   private StringBuffer getBuffer() throws IOException {

      final BufferedReader reader = new BufferedReader(new FileReader("src/test/resources/stubs/report-2d38574d-5b64-4e55-892b-d03c659fdb98.xml"));

      final StringBuffer buffer = new StringBuffer();

      while (reader.ready()) {

         buffer.append(reader.readLine().trim());
      }

      reader.close();

      return buffer;

   }
}
