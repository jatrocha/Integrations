package com.modulo.integrations.openvas.service;

import java.io.IOException;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.xml.bind.DatatypeConverter;

import org.springframework.stereotype.Service;

import com.modulo.integrations.openvas.converter.ReportConverter;
import com.modulo.integrations.openvas.to.VulnerabilityReport;
import com.modulo.integrations.openvas.utils.OpenVASReportListUtil;

@Service(value = "OpenVASVulnerabilityReportsService")
public class OpenVASVulnerabilityReportsService {

   @Resource
   private OpenVASVulnerabilityReportsServiceAdapter serviceAdapter;

   @Resource
   private OpenVASReportListUtil reportUtil;

   /**
    * @param serviceAdapter {@link OpenVASVulnerabilityReportsServiceAdapter} utilizando em testes unitarios.
    */
   protected final void setServiceAdapter(final OpenVASVulnerabilityReportsServiceAdapter serviceAdapter) {

      this.serviceAdapter = serviceAdapter;
   }

   /**
    *
    * @param reportListUtil {@link OpenVASReportListUtil}
    */
   protected final void setReportListUtilMock(final OpenVASReportListUtil reportListUtil) {
      this.reportUtil = reportListUtil;
   }

   public List<VulnerabilityReport> list() throws IOException, NoSuchAlgorithmException {

      final List<VulnerabilityReport> reports = new ArrayList<VulnerabilityReport>();

      final Map<String, StringBuffer> reportFiles = this.serviceAdapter.list();

      for (final String key : reportFiles.keySet()) {

         final StringBuffer reader = reportFiles.get(key);

         final String buffer = reader.toString();

         final String hash = this.md5Hash(buffer.getBytes());

         if (this.reportUtil.isNotProcessed(hash)) {

            reports.add(new ReportConverter().convert(buffer));

            this.reportUtil.register(hash);
         }

      }

      return reports;
   }

   protected final String md5Hash(final byte[] bytes) throws NoSuchAlgorithmException, IOException {

      return DatatypeConverter.printHexBinary(MessageDigest.getInstance("MD5").digest(bytes));
   }

}
