package com.modulo.integrations.commons.ddi.converter;

import org.apache.commons.lang.StringUtils;
import org.junit.Test;

import com.modulo.integrations.ddi.to.Host;
import com.modulo.integrations.ddi.to.Vulnerability;
import com.modulo.riskmanager.client.to.event.Event;

import static org.junit.Assert.assertEquals;

public class VulnerabilityToEventConverterTest {

   @Test(expected = IllegalArgumentException.class)
   public void naoDeveConverterQuandoHostInvalidoNull() {

      new VulnerabilityToEventConverter().convert(null);

   }

   @Test
   public void deveConverterQuandoHostValido() {

      final Host host = this.getHost();

      final Vulnerability vulnerability = host.getVulnerabilities().iterator().next();

      final Event actual = new VulnerabilityToEventConverter().with(host).convert(vulnerability);

      assertEquals(vulnerability.getTitle(), actual.getTitle());

      assertEquals(vulnerability.getRiskLevel(), actual.getCustomAttributes().get("risk_level"));

      assertEquals(vulnerability.getStatus(), actual.getCustomAttributes().get("vulnerability_status"));

      assertEquals(vulnerability.getFirstDiscoveryDate(), actual.getCustomAttributes().get("first_discovery_date"));

      assertEquals(vulnerability.getManuallyAdded(), actual.getCustomAttributes().get("manually_added"));

      assertEquals(vulnerability.getCvssScore(), actual.getCustomAttributes().get("cvssScore"));

      assertEquals(vulnerability.getVulnerabilityId(), actual.getCustomAttributes().get("vulnerability_id"));

      assertEquals(vulnerability.getVulnerabilityTypeId(), actual.getCustomAttributes().get("vulnerability_type_id"));

      assertEquals(vulnerability.getData(), actual.getDescription());

      assertEquals(vulnerability.getVulnDataWasTruncated(), actual.getCustomAttributes().get("vuln_data_was_truncated"));

      assertEquals(vulnerability.getSolution(), actual.getCustomAttributes().get("new_vulnerability_solution"));

      assertEquals(vulnerability.getNetworkProtocol(), actual.getCustomAttributes().get("network_protocol"));

      assertEquals(vulnerability.getApplicationProtocol(), actual.getCustomAttributes().get("application_protocol"));

      assertEquals(vulnerability.getPort(), actual.getCustomAttributes().get("application_port"));

      assertEquals(host.getIpAddress(), actual.getCustomAttributes().get("ipaddress"));

      assertEquals(host.getName(), actual.getCustomAttributes().get("hostname"));

      assertEquals(host.getOperatingSystem(), actual.getCustomAttributes().get("operating_system"));

      assertEquals(host.getParentIp(), actual.getCustomAttributes().get("parent_ip"));
   }

   private Host getHost() {

      final Host expected = new Host();

      expected.setIpAddress("204.76.30.119");

      expected.setName("crminterview.crm.aflac.com");

      expected.setOperatingSystem("Windows Server 2003");

      expected.setParentIp(StringUtils.EMPTY);

      final Vulnerability vulnerability = new Vulnerability();

      vulnerability.setTitle("Microsoft Windows Server 2003 End of Life");

      vulnerability.setRiskLevel("high");

      vulnerability.setStatus("recurred");

      vulnerability.setFirstDiscoveryDate("2015-11-16 05:34:47");

      vulnerability.setManuallyAdded("0");

      vulnerability.setCvssScore("7.6");

      vulnerability.setId("17691987");

      vulnerability.setVunerabilityTypeId("DDI");

      vulnerability.setData("Support has ended for Windows Server 2003. This host should be immediately upgraded.");

      vulnerability.setDataWasTruncated("no");

      vulnerability.setSolution("If this host is required for production, please upgrade the operating system and ensure it is fully patched.");

      vulnerability.setNetworkProtocol("tcp");

      vulnerability.setApplicationProtocol("unknown");

      expected.getVulnerabilities().add(vulnerability);

      return expected;
   }

}
