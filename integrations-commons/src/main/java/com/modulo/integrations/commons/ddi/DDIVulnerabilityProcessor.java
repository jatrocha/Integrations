package com.modulo.integrations.commons.ddi;

import java.io.IOException;
import java.security.NoSuchAlgorithmException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.annotation.Resource;
import javax.persistence.EntityManagerFactory;

import org.springframework.stereotype.Service;

import br.com.cygnus.framework.template.business.converter.Converter;
import br.com.cygnus.framework.util.PropertiesUtil;

import com.modulo.integrations.commons.ComplianceProcessor;
import com.modulo.integrations.commons.ddi.converter.EventToDDIEventEntityConverter;
import com.modulo.integrations.commons.ddi.converter.EventToDDIEventKeyConverter;
import com.modulo.integrations.commons.ddi.converter.VulnerabilityToEventConverter;
import com.modulo.integrations.commons.ddi.to.DDIEventKey;
import com.modulo.integrations.commons.persistence.model.DDIEventEntity;
import com.modulo.integrations.commons.riskmanager.business.EventListBusiness;
import com.modulo.integrations.ddi.service.DDIVulnerabilityReportsService;
import com.modulo.integrations.ddi.to.Host;
import com.modulo.integrations.ddi.to.Vulnerability;
import com.modulo.integrations.ddi.to.VulnerabilityReport;
import com.modulo.integrations.qualys.exception.QualysBusinessException;
import com.modulo.riskmanager.client.exception.LackOfAuthorizationException;
import com.modulo.riskmanager.client.to.Auth;
import com.modulo.riskmanager.client.to.event.Event;

@Service(value = "ddiVulnerabilityProcessor")
public class DDIVulnerabilityProcessor extends ComplianceProcessor<DDIEventKey, VulnerabilityReport, DDIEventEntity> {

   private Auth auth;

   @Resource
   private DDIVulnerabilityReportsService reportsService;

   @Resource
   private EventListBusiness eventListBusiness;

   @Resource
   private EntityManagerFactory factory;

   public DDIVulnerabilityProcessor with(Auth auth) {

      this.auth = auth;

      return this;
   }

   public List<DDIEventEntity> process() throws LackOfAuthorizationException, QualysBusinessException {

      if (this.auth == null) {

         throw new IllegalArgumentException();
      }

      try {

         final List<DDIEventEntity> retorno = new ArrayList<DDIEventEntity>();

         final Map<DDIEventKey, Event> riskManagerEvents = this.getRiskManagerEvents();

         for (final VulnerabilityReport report : this.reportsService.list()) {

            if (report != null) {

               final Map<DDIEventKey, Event> controlEvents = this.controlToEvents(report);

               retorno.addAll(this.processEntities(controlEvents, riskManagerEvents));
            }
         }

         return retorno;

      } catch (final IOException | NoSuchAlgorithmException e) {

         throw new RuntimeException(e);
      }

   }

   protected Map<DDIEventKey, Event> controlToEvents(final VulnerabilityReport report) {

      final Map<DDIEventKey, Event> events = new HashMap<DDIEventKey, Event>();

      for (final String key : report.getHosts().keySet()) {

         final Host host = report.getHosts().get(key);

         for (final Vulnerability vulnerability : host.getVulnerabilities()) {

            final Event event = new VulnerabilityToEventConverter().with(host).convert(vulnerability);

            final DDIEventKey eventKey = new EventToDDIEventKeyConverter().convert(event);

            events.put(eventKey, event);
         }
      }

      return events;
   }

   @Override
   protected Map<DDIEventKey, Event> controlToEvents(final List<VulnerabilityReport> list) {
      return null;
   }

   @Override
   protected Map<DDIEventKey, Event> indexRMEvents(Map<String, Event> rmEvents) {

      final Map<DDIEventKey, Event> events = new HashMap<DDIEventKey, Event>();

      for (final String key : rmEvents.keySet()) {

         final Event event = rmEvents.get(key);

         final DDIEventKey eventKey = new EventToDDIEventKeyConverter().convert(event);

         events.put(eventKey, event);
      }

      return events;
   }

   @Override
   protected Boolean hasControlPassed(Map<DDIEventKey, Event> controlEvents, DDIEventKey key) {

      return Boolean.valueOf("Closed".equalsIgnoreCase(controlEvents.get(key).getCustomAttributes().get("vulnerability_status").toString()));
   }

   @Override
   protected String getPassedComment() {

      return PropertiesUtil.getInstance().getString("DDI.Event.Update.Comment");
   }

   @Override
   protected String getFailedComment() {

      return PropertiesUtil.getInstance().getString("DDI.Event.Update.Comment");
   }

   @Override
   protected EventListBusiness getEventListBusiness() {

      return this.eventListBusiness;
   }

   @Override
   protected Auth getAuth() {

      return this.auth;
   }

   @Override
   protected Converter<Event, DDIEventEntity> getConverter() {

      return new EventToDDIEventEntityConverter();
   }

   @Override
   protected EntityManagerFactory getFactory() {

      return this.factory;
   }

   @Override
   protected String getEventType() {

      return PropertiesUtil.getInstance().getString("DDI.EventType");
   }

}
